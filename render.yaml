services:
  - name: NHG-Chatbot
    type: web
    env: python
    buildCommand: pip install -r NHG-Chatbot/requirements.txt
    startCommand: chainlit run NHG-Chatbot/app.py --host 0.0.0.0 --root-path /NHG-Chatbot
    healthCheckPath: /NHG-Chatbot/health
    routes:
      - path: /NHG-Chatbot

  - name: chatbot2
    type: web
    env: python
    buildCommand: pip install -r chatbot2/requirements.txt
    startCommand: chainlit run chatbot2/app.py --host 0.0.0.0 --root-path /chatbot2
    healthCheckPath: /chatbot2/health
    routes:
      - path: /chatbot2

```**Explanation:**

*   **`services`**: Defines the list of services to deploy.
*   **`name`**: A unique name for each service (e.g., `NHG-Chatbot`, `chatbot2`).
*   **`type`**: Specifies the service type as `web`.
*   **`env`**: Sets the environment to `python`.
*   **`buildCommand`**: Installs the dependencies for each chatbot using `pip install -r requirements.txt`.
*   **`startCommand`**: This is the crucial part. It tells Render how to start each Chainlit app:
    *   `chainlit run NHG-Chatbot/app.py`: Runs the Chainlit app.
    *   `--host 0.0.0.0`:  Makes the app accessible from outside the container.
    *   `--root-path /NHG-Chatbot`:  Tells Chainlit to serve the app under the `/NHG-Chatbot` subpath.
*   **`healthCheckPath`**: Specifies a path for Render to check the health of the service. You might need to create a simple health check endpoint in your Chainlit apps (e.g., `/health`) or use a default one if Chainlit provides it.
*   **`routes`**: Defines the URL path for each service.

**3. Deploy to Render:**

1.  Connect your Render account to your Git repository.
2.  Create a new "Web Service" on Render.
3.  Choose "Deploy an existing image from a registry" and select your repository.
4.  Render should automatically detect the `render.yaml` file and deploy your services.

**Important Considerations:**

*   **Health Check:** Implement a simple health check endpoint in each Chainlit app (e.g., a route that returns a 200 OK status). This allows Render to monitor the health of your services and restart them if necessary.
*   **Static Assets:** If your Chainlit apps have static assets (like images or CSS files), make sure they are served correctly under the subpath. You might need to adjust the paths in your HTML or CSS files accordingly.
*   **Testing:** Thoroughly test your deployment to ensure that each chatbot is accessible under its respective subpath and that all features are working as expected.

By following these steps, you should be able to deploy multiple Chainlit chatbots on Render, each accessible through a unique subpath.
